{
  "name": "node-mssql-connector",
  "description": "A simple connect and execute plugins for MSSQL querys on nodejs.",
  "version": "0.1.2",
  "author": {
    "name": "Christopher Zotter",
    "email": "nachbarshund+npm@gmail.com"
  },
  "main": "./lib/mssqlconnector.js",
  "engines": {
    "node": "> 0.8.10"
  },
  "dependencies": {
    "tedious": "0.1.5",
    "lodash": "*",
    "extend": "*",
    "tedious-connection-pool": "0.1.1"
  },
  "devDependencies": {
    "should": "*",
    "async": "*",
    "grunt": "0.4.x",
    "grunt-regarde": "*",
    "grunt-contrib-coffee": "0.5.0",
    "grunt-notify": "*",
    "grunt-mocha-cli": "*"
  },
  "keywords": [
    "nodejs",
    "mssql",
    "query"
  ],
  "repository": {
    "type": "git",
    "url": "http://github.com/Nachbarshund/node-mssql-connector.git"
  },
  "readme": "\n# node-mssql-connector\n\nThis is a NodeJS module to connect to MSSQL databases and executed queries or stored procedures. This plugin is based on [tedious by Mike D Pilsbury](http://pekim.github.io/tedious/index.html). \n\nThe plugin is written in CoffeeScript.\n\n# Basics\n- Supports all simple SQL- Statements like `UPDATE`, `DELETE`, `SELECT` etc.\n- Supports multiple connections via `tedious-connection-pool`.\n- *Stored procedures* can be executed\n- Get the data in JSON format\n- Run the test to check that everything is correct\n\n# Installation\n\n`npm install node-mssql-connector`\n\n\n# Example\n\n## Use In NodeJS\n\n### Initialize node-mssql-connector\n\n```\nMSSQLConnector = require( \"node-mssql-connector\" )\nMSSQLClient = new MSSQLConnector( {\n\tsettings: {\n\t\tmax: 20,\n\t\tmin: 0,\n\t\tidleTimeoutMillis: 30000\n\t},\n\tconnection: {\n\t\tuserName: \"\",\n\t\tpassword: \"\",\n\t\tserver: \"\",\n\t\toptions: {\n\t\t\tdatabase: \"\"\n\t\t}\n\t}\n```\n\n\n\n## SQL statement  \n\nFirst define the query statement.\n\n```\nquery = MSSQLClient.query( \"\n\tSELECT ID, Name, Lastname\n\tFROM Table\n\tWHERE id = @id\n\")\n```\n\nSet the parameters. Values with leading `@` are defined as parameters.\nIf there aren't any parameter you do not need the following line.  \n \n**Important** You have to use the *correct datatype* from tedious. They can be found here (column \"Constant\"): [http://pekim.github.io/tedious/api-datatypes.html](http://pekim.github.io/tedious/api-datatypes.html)\n\n```\nquery.param( \"id\", \"Int\",  23 )\n```\n\nExecute the query. The result will be returned as an `Array` with an `Object` for each result.\n\n\n```\nquery.exec( function( err, res ){\n\tif( err ){\n\t\tconsole.error( err );\n\t\treturn\n\t}\n\t\n\t/*\n\t\n\tThe result looks like this:\n\t\n\t{ \n\t\tresult:[ \n\t\t\t{ \n   \t\t\t\tid: 23,\n       \t\t\tname: \"Testuser\"\",\n       \t\t\tlastname: \"Testlast\" \n       \t\t} \n       \t],\n  \t\trowcount: 1 \n  \t}\n  \t\n  \t*/\n\t\n})\n```\n\n## Stored procedure\n\nThe stored procedure in database looks like:\n\n``` \n...\nALTER PROCEDURE [dbo].[sp_demo] \n\n@ID Int,\n@Total Tinyint = 0 Output,\n@Teststring Varchar(100) = 'Default' Output\nAS\n\nSET @Teststring = \"Modifed\"\n\nSET @Total = 100\n\nSELECT ID, Name, Lastname\nFROM Table\nWHERE ID = @id\n```\n\nThe difference to **SQL Statment** is that you have to call the `storedprod` method of **MSSQLClient**. If your stored procedure has output params (like in this example) then you must define this via `storedprod.outParam`\n\n```\nstoredprod = MSSQLClient.storedprod( \"tedious_get2\" )\nstoredprod.param( \"id\", \"Int\",  23 )\nstoredprod.outParam( \"Total\", \"Int\" )\nstoredprod.outParam( \"Teststring\", \"VarChar\"\" )\nstoredprod.( function( err, res ){\n\tif( err ){\n\t\tconsole.error( err );\n\t\treturn\n\t}\n\t\n\t/*\n\t\n\tThe result looks like this. The paran 'output' is only by stored procedures.\n\t\n\t{ \n\t\tresult:[ \n\t\t\t{ \n   \t\t\t\tid: 23,\n       \t\t\tname: \"Testuser\"\",\n       \t\t\tlastname: \"Testlast\" \n       \t\t} \n       \t],\n       \toutput: [ \n       \t\t{ \n       \t\t\tTotal: 100 \n       \t\t}, \n       \t\t{ \n       \t\t\tTeststring: \"Modifed\" \n       \t\t} \n       \t],\n  \t\trowcount: 1 \n  \t}\n  \t\n  \t*/\n\t\n})\n\n```\n  \n\n\n# Not implemented yet\n- Test for inserting stored procedures\n- Test for run stored procedures\n- Check if database exists\n\n\n# The MIT License (MIT)\n\nCopyright © 2013 Christopher Zotter, http://www.tcs.de\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n",
  "readmeFilename": "README.md",
  "_id": "node-mssql-connector@0.1.2",
  "dist": {
    "shasum": "997a1617ff20cb57aa83d9fc046470a9b258b1c8"
  },
  "_from": "node-mssql-connector@",
  "_resolved": "https://registry.npmjs.org/node-mssql-connector/-/node-mssql-connector-0.1.2.tgz"
}
